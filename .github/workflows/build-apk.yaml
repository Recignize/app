name: Build and Release APK

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Install EAS CLI
        run: npm install --no-save --global eas-cli

      - name: Trigger EAS build (returns JSON)
        id: trigger
        run: |
          # trigger build and capture json output
          eas build --platform android --profile production --non-interactive --json > eas-build.json
          cat eas-build.json
          # extract build id (support either array or single object)
          BUILD_ID=$(jq -r 'if type=="array" then .[0].id else .id end' eas-build.json)
          if [ -z "$BUILD_ID" ] || [ "$BUILD_ID" = "null" ]; then
            echo "Could not obtain build id from eas build output"
            exit 1
          fi
          echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Wait for build to finish and get artifact URL
        id: wait_and_fetch
        run: |
          BUILD_ID=${{ steps.trigger.outputs.build_id }}
          if [ -z "$BUILD_ID" ]; then
            echo "No build id; exiting"
            exit 1
          fi

          # Poll build status until finished or errored
          for i in $(seq 1 180); do   # up to ~30 minutes if interval 10s -> tune as needed
            echo "Checking build status (attempt $i)..."
            eas build:view "$BUILD_ID" --json > eas-build-view.json || true
            # try different JSON shapes (older/newer cli differences)
            STATUS=$(jq -r 'if type=="array" then .[0].status // .[0].state elif .status then .status elif .state then .state else "UNKNOWN" end' eas-build-view.json)
            echo "status=$STATUS"
            if [ "$STATUS" = "finished" ] || [ "$STATUS" = "FINISHED" ] || [ "$STATUS" = "success" ]; then
              echo "Build finished"
              break
            fi
            if [ "$STATUS" = "errored" ] || [ "$STATUS" = "ERRORED" ] || [ "$STATUS" = "failed" ]; then
              cat eas-build-view.json
              echo "Build failed with status: $STATUS"
              exit 1
            fi
            sleep 10
          done

          # Extract artifact URL. Support multiple possible fields added across eas-cli versions.
          ARTIFACT_URL=$(jq -r '
            if type=="array" then
              .[0].artifacts[0].url // .[0].artifacts.buildUrl // .[0].buildArtifactsUrl // .[0].artifacts[0].buildUrl // .[0].artifacts[0].archiveUrl
            else
              .artifacts[0].url // .artifacts.buildUrl // .buildArtifactsUrl // .artifacts[0].buildUrl // .artifacts[0].archiveUrl
            end
          ' eas-build-view.json)

          if [ -z "$ARTIFACT_URL" ] || [ "$ARTIFACT_URL" = "null" ]; then
            echo "Could not find artifact URL in eas build:view output:"
            cat eas-build-view.json
            exit 1
          fi

          echo "artifact_url=$ARTIFACT_URL" >> $GITHUB_OUTPUT
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Download APK artifact
        id: download
        run: |
          ARTIFACT_URL=${{ steps.wait_and_fetch.outputs.artifact_url }}
          if [ -z "$ARTIFACT_URL" ]; then
            echo "No artifact URL"
            exit 1
          fi
          echo "Downloading artifact from: $ARTIFACT_URL"
          # Follow redirects and provide auth token header
          curl -L -H "Expo-Token: $EXPO_TOKEN" -H "Authorization: Bearer $EXPO_TOKEN" "$ARTIFACT_URL" -o app.apk
          file app.apk || true
          if [ ! -s app.apk ]; then
            echo "Downloaded file empty or missing"
            ls -la
            exit 1
          fi

      - name: Create GitHub Release (if none exists for this commit)
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: app.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
